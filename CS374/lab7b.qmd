<script src="https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js?config=TeX-AMS_CHTML-full"
        integrity="sha256-DViIOMYdwlM/axqoGDPeUyf0urLoHMN4QACBKyB58Uw="
        crossorigin="anonymous" referrerpolicy="no-referrer">
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [['$','$'], ['\\(','\\)']],
            displayMath: [['$$','$$'], ['\\[','\\]']],
            processEscapes: true,
            processEnvironments: true,
        }
    });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.css">
<script src="https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.js">
</script>

<h1 class=post>Dynamic programming</h1> 
<span class='meta'>Nov 22, 2023</span>

When going over the lab7b I wanted to understan more clearly how to identity patterns and similarties to other problems and when to use dynamic programming.

A subsequence of a sequence like a and array, a linked list, or a string, is obtained by removing zero or more elements and keeping the rest in the same sequence order. 
It is also called a substring if the elements are contiguous in the original sequence. 

### Working on the examples:

1. Given an array $A[1...n]$ of integers, compute the length of a longest increasing subsequence of $A$. A sequence $B[1...\ell]$ is increasing if $B[i] > B[i - 1]$ for every index $i \geq 2$.

$$
LIS(i, j) = \begin{cases}  0 & \text{if } j > n \\
          LIS(i, j + 1) & \text{if } j \leq n \text{ and } A[i] \geq A[j] \\
          \max \{LIS(i, j + 1), 1 + LIS(j, j+1)\} & \text{ otherwise}
  \end{cases}
$$


<pre id="lis" class="pseudocode">
    % This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
    \begin{algorithm}
    \caption{Longest Increasing Subsequence}
    \begin{algorithmic}
    \PROCEDURE{LIS}{$A[1 \cdots n]$}
        \STATE $A[0] \gets - \infty$
         \FOR{$i \gets 0$ \TO $n$}
            \STATE LIS$[i, n + 1] \gets 0$
        \ENDFOR
        \FOR{$j \gets n$ down \TO $1$}
            \FOR{$i \gets j - 1$ down \TO $0$}
              \IF{$A[i] \geq A[j]$}
                \STATE LIS$[i, j] \gets$ LIS$[i, j + 1]$
              \ELSE
                \STATE LIS$[i, j] \gets \max \{LIS[i, j+1], 1 + LIS[j, j+1]\}$
              \ENDIF
            \ENDFOR
        \ENDFOR
        \STATE return LIS$[0, 1]$
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>

<!-- Here is the code in C++ -->

<!-- ```cpp
int FastLIS(const vector<int>& A) {
    int n = A.size();
    vector<vector<int>> LISbigger(n + 1, vector<int>(n + 2, 0));

    // Base cases
    for (int i = 0; i <= n; ++i) {
        LISbigger[i][n + 1] = 0;
    }

    // Add a sentinel
    vector<int> B = A;
    B.insert(B.begin(), INT_MIN);

    for (int j = n; j >= 1; --j) {
        for (int i = 0; i <= j - 1; ++i) {
            int keep = 1 + LISbigger[j][j + 1];
            int skip = LISbigger[i][j + 1];

            if (B[i] >= B[j]) {
                LISbigger[i][j] = skip;
            } else {
                LISbigger[i][j] = max(keep, skip);
            }
        }
    }

    return LISbigger[0][1];
}
``` -->

<script>
    pseudocode.renderElement(document.getElementById("quicksort"));
</script>

<script>
    pseudocode.renderClass("pseudocode");
</script>

