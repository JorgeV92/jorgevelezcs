<h1 class=post>Sorting</h1>
<span class='meta'>Nov 22, 2023</span>
<hr/>

<script src="https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js?config=TeX-AMS_CHTML-full"
        integrity="sha256-DViIOMYdwlM/axqoGDPeUyf0urLoHMN4QACBKyB58Uw="
        crossorigin="anonymous" referrerpolicy="no-referrer">
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [['$','$'], ['\\(','\\)']],
            displayMath: [['$$','$$'], ['\\[','\\]']],
            processEscapes: true,
            processEnvironments: true,
        }
    });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.css">
<script src="https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.js">
</script>


### Heap Sort 

The binary heap data structure is a array data structure as a almost full binary tree. Here is a provided way to implement to compute the indices of the parent node, left, and right child 

<pre id="Parent" class="pseudocode">
    \begin{algorithm}
    \caption{Parent}
    \begin{algorithmic}
    \PROCEDURE{Parent}{$i$}
        \STATE{return $\lfloor(i / 2)\rfloor$}
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>

<pre id="Left" class="pseudocode">
    \begin{algorithm}
    \caption{Left}
    \begin{algorithmic}
    \PROCEDURE{Left}{$i$}
        \STATE{return $2i$}
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>

<pre id="Right" class="pseudocode">
    \begin{algorithm}
    \caption{Right}
    \begin{algorithmic}
    \PROCEDURE{Right}{$i$}
        \STATE{return $2i + 1$}
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>

There are two ways to implement the binary heaps, the max-heaps and min-heaps. 
Here we focus on the max-heap such that it obeys the max-heap property as follows

$$A[\text{Parent}(i)] \geq A[i]$$

- The $\textbf{Max-Heapify}$ running time is $O(log \: n)$ logarthimic time, which maintains the max-heap property.

- The $\textbf{Build-Max-Heap}$ running time is $O(n)$ linear time, builds a max-heap from an unordered input array.

- The $\textbf{HeapSort}$ running time is $O(n \: log \: n)$ which sorts the array in place.

<pre id="Max-Heapify" class="pseudocode">
    \begin{algorithm}
    \caption{Max-Heapify}
    \begin{algorithmic}
    \PROCEDURE{Max-Heapify}{$A, i$}
        \STATE{$l = $ \textsc{Left}$(i)$}
        \STATE{$r = $ \textsc{Right}$(i)$}
        \IF{$l \leq A$.heap-size and $A[l] > A[i]$}
            \STATE{largest $= l$}
        \ELSE
            \STATE{largest $= i$} 
        \ENDIF
        \IF{$r \leq A$.heap-size and $A[r] > A[largest]$}
            \STATE{$largest = r$}
        \ENDIF
        \IF{$largest \neq i$}
            \STATE{exchange $A[i]$ with $A[largest]$}
            \STATE \CALL{Max-Heapify}{$A, largest$}
        \ENDIF
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>

#### Building a heap 

<pre id="Build-Max-Heap" class="pseudocode">
    \begin{algorithm}
    \caption{Build-Max-Heap}
    \begin{algorithmic}
    \PROCEDURE{Build-Max-Heap}{$A, n$}
        \STATE{$A.$heap-size = $n$}
        \FOR{ $i \gets \lfloor n / 2 \rfloor$ down to 1}
            \STATE \CALL{Max-Heapify}{$A, i$}
        \ENDFOR
    \ENDPROCEDURE
    \end{algorithmic}
    \end{algorithm}
</pre>



<script>
    pseudocode.renderElement(document.getElementById("quicksort"));
</script>

<script>
    pseudocode.renderClass("pseudocode");
</script>