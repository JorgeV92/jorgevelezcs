<h1 class="post" style="padding-bottom: 9px;">Types and Type Systems</h1>
<span class='meta'>March 1, 2024</span><br>
<span class='meta'>All notes are expanded based on </span>


<!--  Debugging only. Scrolls all the way to the bottom  Comment out when done.-->
<script>
document.addEventListener("DOMContentLoaded", function() {
  window.scrollTo(0, document.body.scrollHeight);
});
</script>

<!-- -----------------------------END-------------------------------- -->

<h1 class=post >Why Data Types?</h1>
<hr />

<ul class="blue-square">
    <li>Data types play a key role in:</li>
    <ul class="red-square">
        <li> $\textcolor{blue}{\text{Data abstraction}}$ in the design of programs</li>
        <li>$\textcolor{blue}{\text{Type checking}}$ in the analysis of programs</li>
        <li>$\textcolor{blue}{\text{Compile-time code generation}}$ in the translation and execution of programs</li>
        <li>Data layout (how many words; which are data and which are pointers) dictated by type</li>
    </ul>
</ul>

<h1 class=post >Terminology</h1>
<hr />

<ul class="blue-square">
    <li>Type: A $\textcolor{blue}{\text{type}} \:\: \textcolor{red}{\text{t}}$ defines a set of ppssible data values</li>
    <ul class="red-square">
        <li>E.g. $\textcolor{red}{\text{short}}$ in C is $\{x \mid 2^{15} - 1 \geq x \geq -2^{15}\}$</li>
        <li>A value in this set is said to have type $\textcolor{blue}{t}$</li>
    </ul>
</ul>

<ul class="blue-square">
    <li>Type system: rules of a language assigning types to expressions</li>
</ul>


<h1 class=post >Types as Specifications</h1>
<hr />

<ul class="blue-square">
    <li>Types describe properties</li>
    <li>Different type systems describe different properties, e.g.</li>
    <ul class="red-square">
        <li>Data is read write-versus read-only </li>
        <li>Operation has authority to access data</li>
        <li>Data came from right source</li>
        <li>Operation might or could not raise an exception</li>
    </ul>
    <li>Common type systems focus on types describing same data layout and access methods</li>
</ul>

<h1 class=post >Sound Type System </h1>
<hr />

<ul class="blue-square">
    <li>If an expression is assigned type $\textcolor{red}{\text{t}}$, and it evaluates toa value $\textcolor{red}{\text{v}}$, then $\textcolor{red}{\text{v}}$ is in the set of values defined by $\textcolor{red}{\text{t}}$</li>
    <li>SML, OCAML, Scheme and Ada have sound type systems </li>
    <li>Most implementations of C and C++ do not</li>
</ul>

<h1 class=post >Strongly Typed Language</h1>
<hr />

<ul class="blue-square">
    <li>When no appliaction of an operator to arguments can lead to a run-time type error, langauge is $\textcolor{red}{\text{stronly typed}}$</li>
    <ul class="red-square">
        <li>E.g. 1 + 2.3;;</li>
    </ul>
    <li>Depends on definition of type error </li>
    <li>C++ claimed to be strongly typed, but </li>
    <ul class="red-square">
        <li>Union types allow creating a value at one type and using it at another</li>
        <li>Type coercions may cause unexpected (underirable) effects</li>
        <li>No array bounds check (in fact, no runtime checks at all)</li>
    </ul>
    <li>SML, OCAML strongly type but still must do dynamic array bounds checks, runtime type case analysis, and other checks</li>
</ul>

<h1 class=post >Static vs Dynamic Types</h1>
<hr />

- $\textcolor{red}{\text{Static type}}:$ type assigned to an expression at compile time 
- $\textcolor{red}{\text{Dynamic type}}:$ type assigned to a storage location at run time
- $\textcolor{red}{\text{Statically typed language}}:$ static type assigned to every expression at compile time
- $\textcolor{red}{\text{Dynamically typed language}}:$ type of an expression determined ar run time

<h1 class=post >Type Checking</h1>
<hr />

<ul class="blue-square">
    <li>When is op(arg1, ..., argn) allowed?</li>
    <li>$\textcolor{red}{\text{Type checking}}$ assures that operations are applied to the right number of arguments of the right types</li>
    <ul class="red-square">
        <li>Right type may mean same type as was specified, or may mean that there is a predefined implicit coercion that will be applied</li>
    </ul>
    <li>Used to resolve overloaded operations</li>
    <li>Type checking may be done $\textcolor{red}{\text{statically}}$ at compile time or $\textcolor{red}{\text{dynimically}}$ at run time</li>
    <li>Dynamically typed (aka untyped) languages (e.g. LISP, Prolog) do only dynamic type checking</li> 
    <li>Statically typed languages can do most typed checking statically</li>
</ul>

<h1 class=post >Dynamic Type Checking</h1>
<hr />

<ul class="blue-square">
    <li>Performed at run-time before each operation is applied</li>
    <li>Types of variables and operations left unspecified until run-time</li>
    <ul class="red-square">
        <li>Same variable may be used at different types</li>
    </ul>
    <li>Data object must contain type information</li>
    <li>Errors aren't detected until violating application is execurted (maybe years after the code was written)</li>
</ul>

<h1 class=post >Static Type Checking</h1>
<hr />

<ul class="blue-square">
    <li>Performed after parsing, before code generation</li>
    <li>Type of every variable and signature of every operator must be known at compile time</li>
    <li>Can eliminate need to store type information in data object if no dynamic type checking is needed</li>
    <li>Catches many programming arrors at earliest point</li>
    <li>Can't check types that depend on dynamically computed values</li>
    <ul class="red-square">
        <li>E.g. array bounds</li>
    </ul>
    <li>Typically places restriction on languages</li>
    <ul class="red-square">
        <li>Garbage collection</li>
        <li>References instead of pointers </li>
        <li>All variables initialized when created</li>
        <li>Variable only used at one type</li>
    </ul>
    <li>Union types allow for work-arounds, but effectively introduce dynamic type checks</li>
</ul>

<h1 class=post >Type Declarations</h1>
<hr />

<ul class="blue-square">
    <li>$\textcolor{red}{\text{Type declarations}}:$ explicit assigment of types to variables (signatures to functios) in the code of a program</li>
    <ul class="red-square">
        <li>Must be checked in a strongly typed language</li>
        <li>Often not necessary for strong typing or even static typing (depends on the type system)</li>
    </ul>
</ul>

<h1 class=post >Type Inference</h1>
<hr />

<ul class="blue-square">
    <li>$\textcolor{red}{\text{Type inference}}:$ A program analysis to assign a type to an expression from the program cobtext of the expression</li>
    <ul class="red-square">
        <li>Fully static type inference first introduced by Robin Miller in ML</li>
        <li>Haskle, OCAML, SML all use type inference</li>
    </ul>
    <li>Records are a problem for type inference</li>
</ul>

<h1 class=post >Format of Type Judgments</h1>
<hr />

<ul class="blue-square">
    <li>A $\textcolor{red}{\text{type judgement}}:$ has the form</li>
    $$ \textcolor{blue}{\Gamma \vdash \text{ exp } : \tau}$$   
    <li>$\textcolor{blue}{\Gamma }$ is typing environment</li>
    <ul class="red-square">
        <li>Supplies the types of variables (and function names when function names are not variables)</li>
        <li>$\textcolor{blue}{\Gamma }$ is a set of the form $\textcolor{blue}{\{x: \sigma, ...\} }$</li>
        <li>For any $\textcolor{blue}{x}$ at most on $\textcolor{blue}{\sigma}$ such that $\textcolor{blue}{(x : \sigma \in \Gamma)}$ </li>
    </ul>
    <li>$\textcolor{blue}{\text{exp}}$ is a program expression</li>
    <li>$\textcolor{blue}{\tau}$ is a type to be assigned to $\textcolor{blue}{\text{exp}}$</li>
    <li>$\textcolor{blue}{\vdash}$ pronounced "turnstyle", or "entails" (or satisfies or, informally, shows)</li>
</ul>

<h1 class=post >Axioms - Constants (Monomorphic)</h1>
<hr />

\newcommand\typeN{\frac{}{\Gamma \: \vdash \: n \: : \: int}}
\newcommand\typeT{\frac{}{\Gamma \: \vdash \: \text{ true } \: : \: \text{ bool }}}
\newcommand\typeF{\frac{}{\Gamma \: \vdash \: \text{ false } \: : \: \text{ bool }}}
\newcommand\typeV{\frac{}{\Gamma \: \vdash \: x \: : \: \sigma}}
\newcommand\typeB{\frac{  \Gamma \: \vdash \: e_1 \: : \: \tau_1 \quad \Gamma \: \vdash \: e_2 \: : \: \tau_2 \quad (\oplus): \: \tau_1 \: \rightarrow \: \tau_2 \: \rightarrow \: \tau_3  }{\Gamma \: \vdash \: e_1 \: \oplus \: e_2 \: : \: \tau_3}}
\newcommand\typeS{\frac{  \Gamma \: \vdash \: e_1 \: : \: \tau \quad \Gamma \: \vdash e_2 \: : \: \tau \quad (\sim) \: : \: \tau \: \rightarrow \: \tau \: \rightarrow \: \text{ bool }   }{\Gamma \:\: \vdash \: e_1 \sim e_2 : \text{ bool }}}

$\textcolor{blue}{\Large\typeN}$ (assuming $\textcolor{blue}{n}$ is an integer constant)

$$   \textcolor{blue}{\typeT \qquad\qquad \typeF}    $$

<ul class="blue-square">
    <li>These rules are true with any typing environmnet </li>
    <li>$\textcolor{blue}{\Gamma, \: n}$ are meta-variables</li>
</ul>

<h1 class=post >Axioms - Variables (Monomorphic Rule)</h1>
<hr />

Notation: Let $\textcolor{blue}{\Gamma(x) = \sigma}$ if $\textcolor{blue}{x : \sigma \in \Gamma}$
Note: if such $\textcolor{blue}{\sigma}$ exits, its unique 

Variable axiom: 

$$ \textcolor{blue}{\typeV} \qquad \qquad \text{ if } \textcolor{blue}{\Gamma(x) = \sigma}$$

<h1 class=post >Simple Rules - Arithmetic (Mono)</h1>
<hr />

Primitive Binary operators $(\textcolor{blue}{\oplus \in \{+, -, *, ...\}}):$

$$\textcolor{blue}{\large\typeB}$$

Special case: Relations $(\textcolor{blue}{\sim \in \{<, >, =, <=, >=\}})$:

$$\textcolor{blue}{\large\typeS}$$

$$ \text{For the moment, think } \textcolor{blue}{\tau} \text{ is int}$$

<h1 class=post >Example: $\scriptsize{\{x : \text{int}\} \vdash x + 2 = 3 : \text{ bool}}$</h1>
<hr />

\newcommand\BinOne{\{x : \text{int}  \} \vdash x + 2 = 3 : \text{int}}
\newcommand\BinTwo{\{x \: : \: \text{int}  \} \: \vdash \: x + 2 \: : \: \text{int}}
\newcommand\ConstOne{\{x : \text{int}  \} \vdash 3 : \text{int}}
\newcommand\Var{\{x \: : \: \text{int} \} \: \vdash \: x \: : \: \text{int}}
\newcommand\ConstTwo{\{x \: : \: \text{int} \} \: \vdash \: 2 \: : \: \text{int}}

What do we need to show first? 

What we need fot the left and right side? 

How to finish?

And

Complete Proof (type derivation)

$$ \large{\text{Bin}\frac{  \text{Bin}\frac{  \text{Var}\frac{}{\Var} \quad \text{Const}\frac{}{\ConstTwo}  }{\BinTwo}  \quad \text{Const}\frac{}{\ConstOne}  }{\BinOne}} $$

<h1 class=post >Simple Rules - Booleans</h1>
<hr />

Connectives

\newcommand\AndO{\Gamma \: \vdash \: e_1 \: \&\& \: e_2 \: : \: \text{ bool}}
\newcommand\OrO{\Gamma \: \vdash \: e_1 \: || \: e_2 \: : \: \text{ bool}}

$$\textcolor{blue}{\large{\frac{\Gamma \: \vdash \: e_1 \: : \: \text{bool} \quad \Gamma \: \vdash \: e_2 \: : \: \text{bool}}{\AndO}}}$$


$$\textcolor{blue}{\large{\frac{\Gamma \: \vdash \: e_1 \: : \: \text{bool} \quad \Gamma \: \vdash \: e_2 \: : \: \text{bool}}{\OrO}}}$$

<h1 class=post >Type Variables in Rules</h1>
<hr />

<ul class="blue-square">
    <li>If-then-else rule:</li>
</ul>

$$\textcolor{blue}{\frac{\Gamma \: \vdash \: e_1 \: :\text{ bool } \quad \Gamma \: \vdash \: e_2 \: : \: \tau \quad \Gamma \: \vdash \: e_3 \: : \: \tau}{\Gamma \: \vdash \: (\text{if } e_1 \text{ then } e_2 \text{ else } e_3) \: \tau}}$$

<ul class="blue-square">
    <li>$\tau$ is a type variable (meta-variable)</li>
    <li>Can take any type at all</li>
    <li>All instances in a rule application must get same type</li>
    <li>Then branch, else branch and if-then-else must all have same type</li>
</ul>


<h1 class=post >Example derivation: if-then-else: </h1>
<hr />

$\large{\textcolor{blue}{\Gamma = \{x : \text{int, int\_of\_float : float } \rightarrow \text{ int, y : float }\}}}$